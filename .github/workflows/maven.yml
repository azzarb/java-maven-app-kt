name: Java CI with Maven2

on:
  workflow_call:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
     
########### sonar scan analysis ###################

    - name: Build and analyze 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=azzarb_java-maven-app-kt
########### upload a build artifact ###############

    - name: Upload a Build Artifact
      run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3.1.2
      with:
       name: javamavenbuildartifacts
       path: staging

########## Junit test with maven ###############

    - name: Junit Test
      run: mvn -B test --file pom.xml
      
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report1
        path: target/site/jacoco/ 

################# Sonar gate ##################################
    - name: Sonar Gate
      shell: bash 
      run: |
        curl --location --request GET 'https://sonarcloud.io/api/measures/component?metricKeys=code_smells,coverage,duplicated_lines_density,vulnerabilities,security_hotspots,critical_violations,bugs&component=ramandevopsnew_java-maven-app' --header 'Authorization: Bearer 4512dc92c65af491dad8c07aa97a7d265f91fb4f' > ./Response.json
        while read jsonData ;
        do
          metric=$(jq -r '.metric' <<< $jsonData)
          value=$(jq -r '.value'<<< $jsonData)
          echo "$metric"
          echo "$value"
          #echo "${metric%.*}"
          if [ "$metric" == "coverage" ] ;
            then
              if [ "${value%.*}" -lt ${{env.COVERAGE-THRESHOLD }} ] ;
                then
                  echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                  echo "Actual ${metric%.*} - ${value%.*}"
                  echo "Sonar code coverage Gate: Failed"
                  exit 1
                else
                  echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                  echo "Actual ${metric%.*} - ${value%.*}"
                  echo "Sonar code coverage Gate: Passed"
                fi
             elif [ "$metric" == "code_smells" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CODE_SMELLS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            elif [ "$metric" == "vulnerabilities" ] ;
              then
                if [ "${value%.*}" -gt ${{env.VULNERABILITIES_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            elif [ "$metric" == "critical_violations" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CRITICAL_VIOLATIONS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            fi
          done <<< $(jq -c '.component.measures[]' $PWD/Response.json)
          cat $PWD/Response.json
          
##########  Build docker image and push into repo ###########
 
    
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: azeemarab/githubaction-with-docker
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
  
